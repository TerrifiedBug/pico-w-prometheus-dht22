name: Create Release

on:
  push:
    tags:
      - "v*" # Production releases (v1.0.1, v2.0.0, etc.)
      - "dev-*" # Development releases (dev-20250526-1234, etc.)
    branches:
      - dev # Auto-create dev releases on push to dev branch
  workflow_dispatch: # Allow manual triggering

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required for creating releases

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine release type and version
        id: release_info
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            # Production release from version tag
            echo "release_type=production" >> $GITHUB_OUTPUT
            echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "release_name=Release ${{ github.ref_name }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/dev-* ]]; then
            # Development release from dev tag
            echo "release_type=development" >> $GITHUB_OUTPUT
            echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "release_name=Development Release ${{ github.ref_name }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/dev ]]; then
            # Check if version.txt already has a dev version
            if [[ -f "version.txt" ]]; then
              EXISTING_VERSION=$(cat version.txt | tr -d '\n\r')
              if [[ "$EXISTING_VERSION" =~ ^dev-[0-9]{8}-[0-9]{6}$ ]]; then
                # Use existing dev version from version.txt
                echo "release_type=development" >> $GITHUB_OUTPUT
                echo "version=$EXISTING_VERSION" >> $GITHUB_OUTPUT
                echo "prerelease=true" >> $GITHUB_OUTPUT
                echo "release_name=Development Release $EXISTING_VERSION" >> $GITHUB_OUTPUT
                echo "auto_tag=true" >> $GITHUB_OUTPUT
                echo "use_existing_version=true" >> $GITHUB_OUTPUT
                echo "Using existing dev version from version.txt: $EXISTING_VERSION"
              else
                # Generate new dev version if version.txt doesn't have proper dev format
                DEV_VERSION="dev-$(date +%Y%m%d-%H%M%S)"
                echo "release_type=development" >> $GITHUB_OUTPUT
                echo "version=$DEV_VERSION" >> $GITHUB_OUTPUT
                echo "prerelease=true" >> $GITHUB_OUTPUT
                echo "release_name=Development Release $DEV_VERSION" >> $GITHUB_OUTPUT
                echo "auto_tag=true" >> $GITHUB_OUTPUT
                echo "use_existing_version=false" >> $GITHUB_OUTPUT
                echo "Generated new dev version: $DEV_VERSION"
              fi
            else
              # No version.txt file, generate new version
              DEV_VERSION="dev-$(date +%Y%m%d-%H%M%S)"
              echo "release_type=development" >> $GITHUB_OUTPUT
              echo "version=$DEV_VERSION" >> $GITHUB_OUTPUT
              echo "prerelease=true" >> $GITHUB_OUTPUT
              echo "release_name=Development Release $DEV_VERSION" >> $GITHUB_OUTPUT
              echo "auto_tag=true" >> $GITHUB_OUTPUT
              echo "use_existing_version=false" >> $GITHUB_OUTPUT
              echo "No version.txt found, generated new dev version: $DEV_VERSION"
            fi
          else
            echo "release_type=unknown" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Update version.txt for auto-generated dev releases
        if: steps.release_info.outputs.auto_tag == 'true' && steps.release_info.outputs.use_existing_version != 'true'
        run: |
          echo "${{ steps.release_info.outputs.version }}" > version.txt
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add version.txt
          git commit -m "Auto-update version for dev release ${{ steps.release_info.outputs.version }}" || exit 0

      - name: Create tag for auto-generated dev releases
        if: steps.release_info.outputs.auto_tag == 'true'
        run: |
          git tag ${{ steps.release_info.outputs.version }}
          git push origin ${{ steps.release_info.outputs.version }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_info.outputs.version }}
          name: ${{ steps.release_info.outputs.release_name }}
          body: |
            ${{ steps.release_info.outputs.release_type == 'production' && '## üöÄ Production Release' || '## üß™ Development Release' }} ${{ steps.release_info.outputs.version }}

            ${{ steps.release_info.outputs.release_type == 'production' && '**This is a stable production release ready for deployment.**' || '**This is a development release for testing new features.**' }}

            ### üìã Release Information
            - **Type**: ${{ steps.release_info.outputs.release_type == 'production' && 'Production' || 'Development/Testing' }}
            - **Branch**: ${{ steps.release_info.outputs.release_type == 'production' && 'main' || 'dev' }}
            - **Version**: ${{ steps.release_info.outputs.version }}
            - **Date**: ${{ github.event.head_commit.timestamp }}

            ${{ steps.release_info.outputs.release_type == 'development' && '### ‚ö†Ô∏è Development Release Notes
            - This release is for testing purposes only
            - May contain experimental features
            - Not recommended for production use
            - Configure your device to use `dev` branch for OTA updates

            ### üîß Testing Instructions
            1. Update your device config: `"branch": "dev"`
            2. Trigger OTA update via `/update` endpoint
            3. Monitor progress on `/update/status` page' || '### üì¶ Production Release Notes
            - Stable release ready for production deployment
            - Thoroughly tested features
            - Recommended for all production devices
            - Use `main` branch for OTA updates' }}

          draft: false
          prerelease: ${{ steps.release_info.outputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
