name: Create Firmware Release

on:
  push:
    tags:
      - "v*" # Production releases (v1.0.0, v1.1.0, etc.)
      - "dev-*" # Development releases (dev-1.0.0, dev-1.1.0, etc.)

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Determine release type
        id: release_type
        run: |
          if [[ "${{ steps.version.outputs.version }}" == dev-* ]] || [[ "${{ steps.version.outputs.version }}" == *-dev ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "release_name=Development Release ${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
            echo "This is a development release"
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "release_name=Release ${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
            echo "This is a production release"
          fi

      - name: Create firmware package
        run: |
          echo "Creating firmware package..."

          # Create release directory
          mkdir -p release-package

          # Copy all firmware files
          cp firmware/* release-package/

          # Include license file
          cp LICENSE release-package/

          # Update version.txt with the tag version
          echo "${{ steps.version.outputs.version }}" > release-package/version.txt

          # List files being packaged
          echo "Files in firmware package:"
          ls -la release-package/

          # Create zip archive
          cd release-package
          zip -r ../firmware-${{ steps.version.outputs.version }}.zip .
          cd ..

          # Verify zip contents
          echo "Zip file contents:"
          unzip -l firmware-${{ steps.version.outputs.version }}.zip

      - name: Generate release notes
        id: release_notes
        run: |
          # Create ultra-minimal release notes to reduce JSON payload size for OTA
          cat > release_notes.md << 'EOF'
          Firmware ${{ steps.version.outputs.version }}
          EOF

          # Set output for use in release creation
          echo "notes_file=release_notes.md" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        run: |
          # Create release using GitHub CLI
          if [[ "${{ steps.release_type.outputs.prerelease }}" == "true" ]]; then
            gh release create ${{ steps.version.outputs.version }} \
              --title "${{ steps.release_type.outputs.release_name }}" \
              --notes-file release_notes.md \
              --prerelease
          else
            gh release create ${{ steps.version.outputs.version }} \
              --title "${{ steps.release_type.outputs.release_name }}" \
              --notes-file release_notes.md
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload firmware package
        run: |
          # Upload complete firmware package
          gh release upload ${{ steps.version.outputs.version }} \
            ./firmware-${{ steps.version.outputs.version }}.zip

          echo "âœ… Firmware package uploaded successfully"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Summary
        run: |
          echo "## ðŸŽ‰ Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Type:** ${{ steps.release_type.outputs.prerelease == 'true' && 'Development' || 'Production' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Release URL:** https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ï¿½ Assets Created:" >> $GITHUB_STEP_SUMMARY
          echo "- firmware-${{ steps.version.outputs.version }}.zip (Complete firmware package)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### âœ¨ Features:" >> $GITHUB_STEP_SUMMARY
          echo "- ðŸ”§ Enhanced configuration system with web interface" >> $GITHUB_STEP_SUMMARY
          echo "- ðŸ“Š Memory-efficient logging system (~10KB RAM usage)" >> $GITHUB_STEP_SUMMARY
          echo "- ðŸ”„ Improved OTA updates with detailed progress tracking" >> $GITHUB_STEP_SUMMARY
          echo "- ï¿½ Dynamic Prometheus labels for flexible monitoring" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸš€ Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Test the release on development devices" >> $GITHUB_STEP_SUMMARY
          echo "2. Update any devices using OTA updates" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitor device health after deployment" >> $GITHUB_STEP_SUMMARY
