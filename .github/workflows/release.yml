name: Create Firmware Release

on:
  push:
    tags:
      - "v*" # Production releases (v1.0.0, v1.1.0, etc.)
      - "dev-*" # Development releases (dev-1.0.0, dev-1.1.0, etc.)

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Determine release type
        id: release_type
        run: |
          if [[ "${{ steps.version.outputs.version }}" == dev-* ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "release_name=Development Release ${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
            echo "This is a development release"
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "release_name=Release ${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
            echo "This is a production release"
          fi

      - name: Create firmware package
        run: |
          echo "Creating firmware package..."

          # Create release directory
          mkdir -p release-package

          # Copy all firmware files
          cp firmware/* release-package/

          # Update version.txt with the tag version
          echo "${{ steps.version.outputs.version }}" > release-package/version.txt

          # List files being packaged
          echo "Files in firmware package:"
          ls -la release-package/

          # Create zip archive
          cd release-package
          zip -r ../firmware-${{ steps.version.outputs.version }}.zip .
          cd ..

          # Verify zip contents
          echo "Zip file contents:"
          unzip -l firmware-${{ steps.version.outputs.version }}.zip

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## Pico W Prometheus DHT22 Sensor Firmware

          ### ðŸ“¦ What's Included

          This firmware package contains all files needed to run the Pico W Prometheus DHT22 sensor:

          - **main.py** - Main application and HTTP server
          - **ota_updater.py** - Over-the-air update functionality
          - **config.py** - Configuration management
          - **device_config.py** - Dynamic device configuration
          - **secrets.py.example** - WiFi credentials template
          - **version.txt** - Firmware version identifier

          ### ðŸš€ Installation Instructions

          1. **Flash MicroPython** to your Pico W (if not already done)
          2. **Download** the firmware zip file below
          3. **Extract** all files to your Pico W root directory
          4. **Copy** `secrets.py.example` to `secrets.py` and add your WiFi credentials
          5. **Restart** your Pico W

          ### ðŸ”§ Configuration

          After installation, visit `http://<pico-ip>/config` to configure:
          - Device location and name
          - OTA update settings
          - GitHub repository settings

          ### ðŸ“ˆ Prometheus Integration

          Add your device to Prometheus configuration:

          ```yaml
          scrape_configs:
            - job_name: "pico_sensors"
              static_configs:
                - targets: ["<pico-ip>:80"]
          ```

          Metrics will automatically include location and device labels.

          ### ðŸ”„ OTA Updates

          This firmware supports over-the-air updates:
          - Configure via web interface at `/config`
          - Manual updates via `/update` endpoint
          - Automatic update checking (configurable)

          ### ðŸ“š Documentation

          - [Project README](https://github.com/${{ github.repository }})
          - [Configuration Guide](https://github.com/${{ github.repository }}/blob/main/docs/README.md)
          - [Troubleshooting](https://github.com/${{ github.repository }}/blob/main/docs/DYNAMIC_CONFIG_IMPLEMENTATION.md)

          EOF

          # Set output for use in release creation
          echo "notes_file=release_notes.md" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: ${{ steps.release_type.outputs.release_name }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ steps.release_type.outputs.prerelease }}

      - name: Upload firmware package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./firmware-${{ steps.version.outputs.version }}.zip
          asset_name: firmware-${{ steps.version.outputs.version }}.zip
          asset_content_type: application/zip

      - name: Upload individual files (for direct download)
        run: |
          # Upload key files individually for easy access
          for file in firmware/main.py firmware/version.txt; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "Uploading $filename..."

              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @"$file" \
                "${{ steps.create_release.outputs.upload_url }}?name=$filename&label=$filename"
            fi
          done

      - name: Release Summary
        run: |
          echo "## ðŸŽ‰ Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Type:** ${{ steps.release_type.outputs.prerelease == 'true' && 'Development' || 'Production' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Release URL:** ${{ steps.create_release.outputs.html_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“¦ Assets Created:" >> $GITHUB_STEP_SUMMARY
          echo "- firmware-${{ steps.version.outputs.version }}.zip (Complete firmware package)" >> $GITHUB_STEP_SUMMARY
          echo "- main.py (Individual file)" >> $GITHUB_STEP_SUMMARY
          echo "- version.txt (Individual file)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸš€ Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Test the release on development devices" >> $GITHUB_STEP_SUMMARY
          echo "2. Update any devices using OTA updates" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitor device health after deployment" >> $GITHUB_STEP_SUMMARY
